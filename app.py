# -*- coding: utf-8 -*-
"""factcheck_serpapi1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gzfv4ZntJr90HXuovNR5eeW7IMv4cdPh
"""


import requests
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# 1. SerpAPI Setup
SERPAPI_API_KEY = "cbf8f7b3b5444a006ce967dbb0d62ba4af5e57453afd57c1edfa8916731ca427"
SEARCH_ENGINE = "google"  # or "bing"

# 2. Initialize the embedding model
model = SentenceTransformer('all-MiniLM-L6-v2')  # Small, accurate, fast

# 3. Search function using SerpAPI
def serpapi_search(query, num_results=5):
    params = {
        "engine": SEARCH_ENGINE,
        "q": query,
        "api_key": SERPAPI_API_KEY,
        "num": num_results,
    }
    response = requests.get("https://serpapi.com/search", params=params)
    response.raise_for_status()
    results = response.json()
    snippets = []

    # Extract snippets from organic results
    if 'organic_results' in results:
        for result in results['organic_results'][:num_results]:
            snippet = result.get('snippet') or result.get('title') or ""
            snippets.append(snippet)
    return snippets

# 4. Fact check function
def fact_check(article_text):
    print("🔍 Searching internet for verification...")
    snippets = serpapi_search(article_text)

    if not snippets:
        return "⚠️ No matching information found. Cannot verify."

    # Embed the article and the snippets
    article_embedding = model.encode([article_text])
    snippets_embedding = model.encode(snippets)

    # Calculate cosine similarities
    similarities = cosine_similarity(article_embedding, snippets_embedding)[0]
    max_sim = np.max(similarities)
    avg_sim = np.mean(similarities)

    # Simple rule-based decision
    if max_sim > 0.75:
        return f"✅ Based on Fact (Max Similarity: {max_sim:.2f})"
    elif 0.5 < avg_sim <= 0.75:
        return f"⚠️ Possibly Misleading (Avg Similarity: {avg_sim:.2f})"
    else:
        return f"❌ Likely False (Avg Similarity: {avg_sim:.2f})"

# 5. Main program
if __name__ == "__main__":
    news_article = input("Paste the news article to verify: ")
    result = fact_check(news_article)
    print("\nResult:", result)
